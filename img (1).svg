import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np

# Function to add the magnetic field grid with circles and dots
def add_magnetic_field(ax, xlim, ylim, spacing):
    for x in np.arange(xlim[0], xlim[1], spacing):
        for y in np.arange(ylim[0], ylim[1], spacing):
            circle = plt.Circle((x+0.375, y+0.42), 0.18*0.9, color='#bbb', fill=False)
            dot = plt.Circle((x+0.375, y+0.42), 0.03*0.9, color='#bbb', fill=True)
            ax.add_artist(circle)
            ax.add_artist(dot)

fig_width = 8*0.75  # cm
fig_height = 5*0.75  # cm

fig = plt.figure(figsize=(fig_width / 2.54, fig_height / 2.54))
ax = fig.add_axes((0, 0, 1, 1))

ax.set_xlim(0, fig_width)
ax.set_ylim(0, fig_height)
add_magnetic_field(ax, ax.get_xlim(), ax.get_ylim(), 0.75)
ax.tick_params(bottom=False, top=False, left=False, right=False)
ax.tick_params(labelbottom=False, labeltop=False, labelleft=False, labelright=False)
ax.set_facecolor("white")

theta = np.linspace(1, 79 * 2 * np.pi, 24800)
r = np.linspace(1, 650, 24800)
x = r * 1.1 * np.cos(theta) + 5.625
y = r * 0.9 * -np.sin(theta) + 2.5

# Plot electrons with a unified label
electron_points = plt.plot(x[72], y[72], 'bo', label='Protonen')[0]
plt.plot(x[96], y[96], 'bo')  # Plot without adding to the legend again

# Annotations
txt = "$\u0046_{Lorentz}$"
ax.annotate(txt, [x[72]+0.4, y[72]+1.5*0.3])
ax.annotate(txt, [x[96]+1.6*0.33, y[96]])
txt = "r"
ax.annotate(txt, [x[96]+0.8, y[96]+1],color="r")
txt = "$\\nu_0$"
ax.annotate(txt, [x[72]-1.5, y[72]+0.2],color="brown")
ax.annotate(txt, [x[96]-1.3, y[96]+1.15],color="brown")
# Arrows
ax.arrow(x[72], y[72], 2*0.8*0.33, 3*0.33, head_width=0.25, head_length=0.25, color="black")
ax.arrow(x[96], y[96], 3*0.6, 2*0.6, head_width=0, head_length=0, color="r")
ax.arrow(x[72], y[72], -2*0.75, 1*0.75, head_width=0.25, head_length=0.25, color="brown")
ax.arrow(x[96], y[96], 3*0.9*0.33, 2*0.9*0.33, head_width=0.25, head_length=0.25, color="black")
ax.arrow(x[96], y[96], -1.5*0.75, 2.25*0.75, head_width=0.25, head_length=0.25, color="brown")

# Rectangle
d_shape = plt.Rectangle((5.75, 2.1), 2*0.75, 2*0.75, color='grey', fill=True)
ax.add_patch(d_shape)

# Particle trajectory
trajectory_line, = ax.plot(x, y, 'k-', label='Laufbahn')

# Creating proxy artists for legend for elements that do not automatically add to legend
black_arrow = mpatches.FancyBboxPatch((0,0), 0, 0, boxstyle="square,pad=0.", color="black", label="Lorentz-Kraft")
red_arrow = mpatches.FancyBboxPatch((0,0), 0, 0, boxstyle="square,pad=0.", color="r", label="Radius")
brown_arrow = mpatches.FancyBboxPatch((0,0), 0, 0, boxstyle="square,pad=0.", color="brown", label="Elektrische Kraft")
grey_rectangle = mpatches.FancyBboxPatch((0,0), 0, 0, boxstyle="square,pad=0.", color="grey", label="Protonen-Quelle")

# Add legend with proxy artists including electrons
ax.legend(handles=[trajectory_line, electron_points, black_arrow, red_arrow, brown_arrow, grey_rectangle], prop={'size':4.5}, loc="lower left", frameon=False, markerscale=0.5)

plt.show()

image_format = 'svg' # e.g .png, .svg, etc.
image_name = 'img.svg'

fig.savefig(image_name, format=image_format)
